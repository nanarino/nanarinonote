import{_ as i,c as a,a0 as n,o as t}from"./chunks/framework.CxXbVT5p.js";const E=JSON.parse('{"title":"初识 python","description":"","frontmatter":{},"headers":[],"relativePath":"python/1-初识python.md","filePath":"python/1-初识python.md","lastUpdated":1734618217000}'),l={name:"python/1-初识python.md"};function p(h,s,e,o,k,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="初识-python" tabindex="-1">初识 python <a class="header-anchor" href="#初识-python" aria-label="Permalink to &quot;初识 python&quot;">​</a></h1><h2 id="计算机基础" tabindex="-1">计算机基础 <a class="header-anchor" href="#计算机基础" aria-label="Permalink to &quot;计算机基础&quot;">​</a></h2><p>内存：储存数据。最早 128MB 内存条，发展到 8G,16G,32G，成本高，断电即消失。<br> 硬盘：储存数据。固态硬盘/机械硬盘，长久保持数据。<br> 操作系统：纯命令行发展为图形界面，<br> 应用程序：操作系统也是应用程序。</p><h2 id="python-历史" tabindex="-1">python 历史 <a class="header-anchor" href="#python-历史" aria-label="Permalink to &quot;python 历史&quot;">​</a></h2><p>宏观上：python2 与 python3 区别：</p><ul><li>python2 源码不标准，混乱，重复代码太多，</li><li>python3 统一 标准，去除重复代码。</li></ul><h2 id="python-的特点" tabindex="-1">python 的特点 <a class="header-anchor" href="#python-的特点" aria-label="Permalink to &quot;python 的特点&quot;">​</a></h2><p>强类型，动态解释型，脚本语言</p><h3 id="python-的发展" tabindex="-1">python 的发展 <a class="header-anchor" href="#python-的发展" aria-label="Permalink to &quot;python 的发展&quot;">​</a></h3><p>...</p><h2 id="python-种类" tabindex="-1">python 种类 <a class="header-anchor" href="#python-种类" aria-label="Permalink to &quot;python 种类&quot;">​</a></h2><h3 id="从实现" tabindex="-1">从实现: <a class="header-anchor" href="#从实现" aria-label="Permalink to &quot;从实现:&quot;">​</a></h3><p>我们用的都是<code>CPython</code>就是用 C 语言实现的 Python 及其解释器（JIT 编译器）<br> 速度最快的是<code>pypy</code>是 python 自己实现的自己<br> 其他版本:C++(<code>Pyston</code>) \\ Java(<code>Jython</code>) \\ C#(<code>IronPython</code>)</p><h3 id="从版本" tabindex="-1">从版本: <a class="header-anchor" href="#从版本" aria-label="Permalink to &quot;从版本:&quot;">​</a></h3><ul><li>python2</li><li>python3</li></ul><p>区别：python2 默认编码方式是 ascii 码，python3 是 Unicode<br> 解决编码问题：在文件的首行：<code>#-*- encoding:utf-8 -*-</code></p><div class="danger custom-block"><p class="custom-block-title">SyntaxError: Non-UTF-8 code starting with ...</p><p>在 python3 中的中文也有小概率遇到这种情况<br> 也是通过 <code>#-*- encoding:utf-8 -*-</code> 来解决</p></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p>变量：就是将一些运算的中间结果暂存到内存中，以便后续代码调用。</p><ul><li><p>必须由数字，字母，下划线任意组合，且不能数字开头。</p></li><li><p>不能是 python 中的关键字 以下:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;and&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;as&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;assert&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;break&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;continue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;del&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;elif&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;else&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;except&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;exec&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;finally&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;for&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;from&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;global&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;if&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;in&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;is&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;lambda&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;not&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;or&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;pass&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;print&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;raise&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;return&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;try&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;while&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;with&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;yield&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div></li><li><p>变量具有可描述性。</p></li><li><p>不能是汉字等字符。</p></li></ul><h2 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h2><p>客观不变的量 或者程序员不希望它被修改的量。如:</p><ul><li>圆周率<code>π=3.14</code></li><li>自然对数底数<code>e=2.71</code></li><li><code>BIR_OF_CHINA :typing.Final[int] = 1949</code></li></ul><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>方便自己方便他人理解代码。</p><ul><li><p>单行注释：<code>#</code></p></li><li><p>多行注释：<code>&#39;&#39;&#39;</code>被注释内容<code>&#39;&#39;&#39;</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">被注释内容:代码千万行,注释第一行,注释不规范,亲人两行泪</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div></li></ul><p>它不仅是注释，也是带换行的字符串块</p><h2 id="用户交互input" tabindex="-1">用户交互<code>input</code> <a class="header-anchor" href="#用户交互input" aria-label="Permalink to &quot;用户交互\`input\`&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>1，等待输入。 2，将输入的内容赋值给了前面变量。 3，<code>input</code>接受的数据类型全部是<code>str</code>类型（字符串类型）</p><h2 id="基础数据类型初始" tabindex="-1">基础数据类型初始 <a class="header-anchor" href="#基础数据类型初始" aria-label="Permalink to &quot;基础数据类型初始&quot;">​</a></h2><p>基础数据类型有：数字，字符串，列表，元组，字典<br> 内置函数<code>type()</code>返回变量的类型</p><ul><li><p>整型：<code>int</code>，十进制的整数类型<br> 数字类型还有浮点型和复数类型，可以相互转换。<br> 数字类型可以参与一些算数运算符：加减乘除<br> 字符串转化成数字：<code>int(str)</code> 条件：str 必须是数字组成的。<br> 数字转化成字符串：<code>str(int)</code></p></li><li><p>布尔值：<code>bool</code><br> True False 表示真假 是逻辑运算表达式的结果<br> 布尔类型并不是基础数据类型 是<strong>继承</strong>的整型的<code>1</code>和<code>0</code></p></li><li><p>字符串：<code>str</code><br> python 当中凡是用引号引起来的都是字符串。<br> 可相加：str + str 拼接<br> 可相乘：str * int 复读</p></li><li><p>列表：<code>list</code><br> 一个具有顺序的容器，可以在里面放置其他类型<br> 用花括号包裹，各个成员之间用逗号隔开：<br><code>[ 2019, &quot;春节&quot;]</code></p></li><li><p>...</p></li></ul>`,33)]))}const c=i(l,[["render",p]]);export{E as __pageData,c as default};
