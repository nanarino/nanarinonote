import{_ as i,c as a,a0 as t,o as n}from"./chunks/framework.CxXbVT5p.js";const o=JSON.parse('{"title":"正则有关模块","description":"","frontmatter":{},"headers":[],"relativePath":"python/23-正则有关模块.md","filePath":"python/23-正则有关模块.md","lastUpdated":1734618217000}'),h={name:"python/23-正则有关模块.md"};function l(k,s,p,e,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="正则有关模块" tabindex="-1">正则有关模块 <a class="header-anchor" href="#正则有关模块" aria-label="Permalink to &quot;正则有关模块&quot;">​</a></h1><p>本篇不会过多介绍正则表达式内容，可参考 js 篇的正则对象章节。</p><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">python 不支持不定长的后行断言（逆序环视）</p><p>error: look-behind requires fixed-width pattern</p></div><blockquote><p>正则就是用一些具有特殊含义的符号组合到一起（称为正则表达式）来描述字符或者字符串的方法。或者说：正则就是用来描述一类事物的规则。（在 Python 中）它内嵌在 Python 中，并通过 re 模块实现。正则表达式模式被编译成一系列的字节码，然后由用 C 编写的匹配引擎执行。</p></blockquote><table tabindex="0"><thead><tr><th>正则表达式</th><th>类型</th><th>匹配内容</th></tr></thead><tbody><tr><td><code>.</code></td><td>元字符</td><td>匹配除换行符以外的任意字符</td></tr><tr><td><code>\\w</code></td><td>元字符</td><td>匹配字母或数字或下划线，大写即非数字字母下划线</td></tr><tr><td><code>\\s</code></td><td>元字符</td><td>匹配任意的空白符，大写即非空字符</td></tr><tr><td><code>\\d</code></td><td>元字符</td><td>匹配数字，大写即非数字</td></tr><tr><td><code>\\n</code></td><td>元字符</td><td>匹配一个换行符，也属于<code>\\s</code></td></tr><tr><td><code>\\t</code></td><td>元字符</td><td>匹配一个制表符，也属于<code>\\s</code></td></tr><tr><td><code>\\b</code></td><td>元字符</td><td>匹配一个单词的边界</td></tr><tr><td><code>^</code></td><td>元字符</td><td>匹配字符串的开始</td></tr><tr><td><code>$</code></td><td>元字符</td><td>匹配字符串的结尾</td></tr><tr><td>\`a</td><td>b\`</td><td>逻辑</td></tr><tr><td><code>(...)</code></td><td>分组</td><td>匹配括号内的组，捕获</td></tr><tr><td><code>(?:...)</code></td><td>分组</td><td>匹配括号内的组，不捕获</td></tr><tr><td><code>(?&lt;Name&gt;...)</code></td><td>命名分组</td><td>匹配括号内的组，捕获并命名（python 支持）</td></tr><tr><td><code>(?&gt;...)</code></td><td>固化分组</td><td>匹配过程中不交还括号内的组（python 不支持）</td></tr><tr><td><code>[...]</code></td><td>字符集</td><td>匹配字符组中的字符</td></tr><tr><td><code>[^...]</code></td><td>字符集</td><td>匹配除了字符组中字符的所有字符</td></tr><tr><td><code>*</code></td><td>量词</td><td>贪婪匹配，重复零次或更多次</td></tr><tr><td><code>+</code></td><td>量词</td><td>贪婪匹配，重复一次或更多次</td></tr><tr><td><code>?</code></td><td>量词</td><td>贪婪匹配，重复零次或一次</td></tr><tr><td><code>{n}</code></td><td>量词</td><td>重复 n 次</td></tr><tr><td><code>{n,}</code></td><td>量词</td><td>重复 n 次或更多次</td></tr><tr><td><code>{n,m}</code></td><td>量词</td><td>重复 n 到 m 次</td></tr><tr><td><code>(?=pattern)</code></td><td>断言</td><td>后面有，断言也叫环视 look-behind</td></tr><tr><td><code>(?!pattern)</code></td><td>断言</td><td>后面没有</td></tr><tr><td><code>(?&lt;=pattern)</code></td><td>断言</td><td>前面有（python 不支持不定长逆序环视）</td></tr><tr><td><code>(?&lt;!pattern)</code></td><td>断言</td><td>前面没有（python 不支持不定长逆序环视）</td></tr></tbody></table><p>注意</p><ul><li>python 中正则表达式是不是真实字符串，需要二重转义，推荐使用真实字符串(<code>r&quot;&quot;</code>)</li><li>贪婪匹配会尽可能匹配，后面加?号使其变成惰性匹配，匹配尽可能少的。</li><li>断言（环视）的括号中的匹配到的内容只会用来判断不会被正则表达式捕获。</li><li>由于状态机制，从左往右被捕获的字符不再参与匹配。例如&#39;ababa&#39;里无法捕获到第二个&#39;aba&#39;</li></ul><h2 id="常用范围" tabindex="-1">常用范围 <a class="header-anchor" href="#常用范围" aria-label="Permalink to &quot;常用范围&quot;">​</a></h2><table tabindex="0"><thead><tr><th>正则</th><th>说明</th></tr></thead><tbody><tr><td><code>[0-9]</code></td><td>和<code>[0123456789]</code>和<code>\\d</code>是一个意思</td></tr><tr><td><code>[a-z]+</code></td><td>不定长的小写字母，尽可能多，一个以上</td></tr><tr><td><code>[A-Z]*?</code></td><td>不定长的大写字母，尽可能少，可以一个都没有</td></tr><tr><td><code>[0-9a-fA-F]</code></td><td>十六进制字符</td></tr><tr><td>\`^.*(?=.jpg$</td><td>.png)\`</td></tr><tr><td><code>^(?!-).*</code></td><td>不以<code>-</code>开头的行（<code>re.M</code>模式）</td></tr><tr><td><code>[a-z0-9_\\.-]{3,15}@[a-z]{2,5}\\.[a-z]{2,6}</code></td><td>Email</td></tr></tbody></table><h2 id="re-模块" tabindex="-1">re 模块 <a class="header-anchor" href="#re-模块" aria-label="Permalink to &quot;re 模块&quot;">​</a></h2><p><a href="https://docs.python.org/zh-cn/3/library/re.html" target="_blank" rel="noreferrer"><code>re</code></a>模块提供了与 Perl 语言类似的正则表达式匹配操作</p><p>最常用方法</p><ul><li><code>re.findall(r,txt)</code> 查找所有满足匹配条件的结果,放在列表里</li><li><code>re.match(r,txt)</code> 匹配第一个然后返回一个包含匹配信息的对象</li><li><code>re.sub(r,s,txt)</code> 将所有满足匹配条件的替换成字符串 s</li></ul><h3 id="模式flags" tabindex="-1">模式<code>flags</code> <a class="header-anchor" href="#模式flags" aria-label="Permalink to &quot;模式\`flags\`&quot;">​</a></h3><p>不同模式主要会改变<code>.</code>以及<code>^</code>和<code>$</code>的匹配行为</p><ul><li><code>None</code> 首行模式，默认的。只有第一行都有开头和结尾。换行符不会被匹配。</li><li><code>re.S</code> / <code>re.DOTALL</code> 单行模式，整个文本看成一行。换行符会被当作普通字符匹配。</li><li><code>re.M</code> / <code>re.MULTILINE</code> 多行模式，每一行都有开头和结尾。换行符不会被匹配。</li><li><code>re.I</code> / <code>re.IGNORECASE</code>忽略大小写模式。</li></ul><p>多模式可以直接相加</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;few.JPG</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">oij.png</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ade.jpg</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ade.jpg.rename</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ytr.GIF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pow.PNG&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">re.findall(r</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;.*(?=\\.jpg|\\.png)&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;oij&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">re.findall(r</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;^.*(?=\\.jpg$|\\.png$)&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> re.M+re.I</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;few&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;oij&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ade&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pow&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="分组" tabindex="-1">分组<code>(...)</code> <a class="header-anchor" href="#分组" aria-label="Permalink to &quot;分组\`(...)\`&quot;">​</a></h3><p>分组在某种程度上完全可以代替断言的功能。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">re.findall(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;(.*?)_sb&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;alex_sb wusir_sb 日天_sb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;alex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;wusir&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;日天&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HTML</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&lt;a href=&quot;http://www.baidu.com&quot;&gt;点击&lt;/a&gt;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">re.findall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;href=&quot;(.*?)&quot;&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://www.baidu.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>分组<code>()</code>中加入<code>?:</code> 表示整体，而不是只针对性捕获<code>()</code>里面的内容。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.(baidu|oldboy).com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.oldboy.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ret</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [&#39;oldboy&#39;]这是因为findall会优先把匹配结果组里内容返回,如果想要匹配结果,取消权限即可</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.(?:baidu|oldboy).com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;www.oldboy.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [&#39;www.oldboy.com&#39;]</span></span></code></pre></div><h3 id="常用方法用例" tabindex="-1">常用方法用例 <a class="header-anchor" href="#常用方法用例" aria-label="Permalink to &quot;常用方法用例&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eva egon yuan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回所有匹配的字符串,放在列表里</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果 : [&#39;a&#39;, &#39;a&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.search(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eva egon yuan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).group()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果 : &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回匹配成功的第一个Match对象，找不到则是None</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Match对象的group()方法得到匹配的字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.match(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).group()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 从头开始匹配 相当于search(&#39;^a&#39;, &#39;abc&#39;).group()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果 : &#39;a&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[ab]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先按&#39;a&#39;分割得到&#39;&#39;和&#39;bcd&#39;,再对&#39;&#39;和&#39;bcd&#39;分别按&#39;b&#39;分割</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [&#39;&#39;, &#39;&#39;, &#39;cd&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.sub(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;H&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eva3egon4yuan4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 简单的匹配后替换，参数1表示只替换1个</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># evaHegon4yuan4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.subn(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;\\d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;H&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eva3egon4yuan4&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 匹配后替换，返回元组(替换的结果,替换了多少次)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.compile(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{3}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将正则表达式编译成为一个Pattern对象，这里匹配的是3个数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.search(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc123eeee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Pattern对象调用search，参数为待匹配的字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret.group())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果 ： 123</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.finditer(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ds3sy4784a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># finditer返回一个存放Match对象的迭代器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret).group())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看第一个的结果</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret).start())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看第二个在原字符串里面的开始的位置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([i.group() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ret])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看剩余的结果</span></span></code></pre></div><h4 id="注意" tabindex="-1">注意： <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意：&quot;">​</a></h4><ul><li>多行模式(<code>MULTILINE</code>)中<code>match()</code>只匹配字符串的开始，但<code>search()</code>和以 <code>&#39;^&#39;</code> 开头的正则会每行匹配</li><li><code>split()</code>的优先级查询</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;\\d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eva3egon4yuan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果 ： [&#39;eva&#39;, &#39;egon&#39;, &#39;yuan&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(\\d+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eva3egon4yuan&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ret)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 结果 ： [&#39;eva&#39;, &#39;3&#39;, &#39;egon&#39;, &#39;4&#39;, &#39;yuan&#39;]</span></span></code></pre></div><p>在匹配部分加上<code>()</code>之后所切出的结果是不同的， 没有<code>()</code>的没有保留所匹配的项，但是有<code>()</code>的却能够保留了匹配的项， 这个在某些需要保留匹配部分的使用过程是非常重要的。</p><ul><li><code>.sub()</code> 第二个参数可以接受函数 第一个参数要使用分组（命名分组）</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;height165weight21deep213&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 要求所有数字内容都加5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.sub(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">?P&lt;num&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.group(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), size)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &#39;height170weight26deep218&#39;</span></span></code></pre></div><h2 id="regex-模块" tabindex="-1">regex 模块 <a class="header-anchor" href="#regex-模块" aria-label="Permalink to &quot;regex 模块&quot;">​</a></h2><p>Python 自带了正则表达式引擎（内置的 re 模块），但是不支持一些高级特性，比如下面这几个：</p><ul><li>固化分组 Atomic grouping</li><li>占有优先量词 Possessive quantifiers</li><li>可变长度的逆序环视 Variable-length lookbehind</li><li>递归匹配 Recursive patterns</li><li>（起始/继续）位置锚\\G Search anchor</li></ul><p>第三方模块 regex 实现了如上高级特效，且 API 与 re 模块一致。</p>`,36)]))}const g=i(h,[["render",l]]);export{o as __pageData,g as default};
