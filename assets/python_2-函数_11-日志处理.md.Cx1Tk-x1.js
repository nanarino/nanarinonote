import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.BF6hFJP9.js";const o=JSON.parse('{"title":"日志处理","description":"","frontmatter":{},"headers":[],"relativePath":"python/2-函数/11-日志处理.md","filePath":"python/2-函数/11-日志处理.md","lastUpdated":1734619541000}'),l={name:"python/2-函数/11-日志处理.md"};function e(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="日志处理" tabindex="-1">日志处理 <a class="header-anchor" href="#日志处理" aria-label="Permalink to &quot;日志处理&quot;">​</a></h1><p>日志可以使用内置的<a href="https://docs.python.org/zh-cn/3/library/logging.html" target="_blank" rel="noreferrer"><code>logging</code></a>模块来生成<br> 服务端的日志可以使用内置的<a href="https://docs.python.org/zh-cn/3/library/sqlite3.html" target="_blank" rel="noreferrer"><code>sqlite3</code></a>模块来持久化。</p><h2 id="logging-模块" tabindex="-1">logging 模块 <a class="header-anchor" href="#logging-模块" aria-label="Permalink to &quot;logging 模块&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##级别依次提高</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.debug(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;排错信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;正常信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.warning(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;警告信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.error(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;错误信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.critical(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;严重错误信息&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>默认情况下 Python 的 logging 模块将日志打印到了标准输出（<code>sys.stdout</code>）中，<br> 且只显示了大于等于 WARNING 级别的日志</p><p>默认的日志格式为 <code>日志级别：Logger名称：用户输出消息</code>。</p><p>它有两种配置方法</p><ul><li>配置 logging 全局参数</li><li>显式地创建 logger 实例并配置</li></ul><p>也可以同时在两处配置，logger 实例上的配置优先级更高。</p><h3 id="配置-logging-全局参数" tabindex="-1">配置 logging 全局参数 <a class="header-anchor" href="#配置-logging-全局参数" aria-label="Permalink to &quot;配置 logging 全局参数&quot;">​</a></h3><p><code>basicConfig()</code>函数更改 logging 模块默认行为</p><ul><li>缺点：低版本 python 里中文会乱码,不能同时控制台打印和写入文件</li><li>优点：灵活配置日志级别，日志格式，和输出位置</li></ul><p>简单的配置：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.basicConfig(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DEBUG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%(asctime)s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %(filename)s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[line:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%(lineno)d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%(levelname)s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %(message)s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    datefmt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> %b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %Y %H:%M:%S&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    filename</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/tmp/test.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    filemode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;w&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.debug(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;debug message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.info(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;info message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.warning(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;warning message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.error(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logging.critical(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;critical message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="更多的配置选项" tabindex="-1">更多的配置选项 <a class="header-anchor" href="#更多的配置选项" aria-label="Permalink to &quot;更多的配置选项&quot;">​</a></h4><ul><li><code>filename</code>：用指定的文件名创建 FiledHandler，这样日志会被存储在指定的文件中。</li><li><code>filemode</code>：文件打开方式，在指定了 filename 时使用这个参数，默认值为“a”还可指定为“w”。</li><li><code>format</code>：指定 handler 使用的日志显示格式。</li><li><code>datefmt</code>：指定日期时间格式。</li><li><code>level</code>：设置 rootlogger 的日志级别</li><li><code>stream</code>：创建指定的 StreamHandler。默认 sys.stderr 可选 sys.stdout 或者文件句柄</li></ul><p>若指定了<code>filename</code>，则<code>stream</code>参数会被忽略。</p><h5 id="format-参数中可能用到的格式化串" tabindex="-1">format 参数中可能用到的格式化串 <a class="header-anchor" href="#format-参数中可能用到的格式化串" aria-label="Permalink to &quot;format 参数中可能用到的格式化串&quot;">​</a></h5><table tabindex="0"><thead><tr><th>格式化串</th><th>含义</th></tr></thead><tbody><tr><td><code>%(name)s</code></td><td>Logger 的名字</td></tr><tr><td><code>%(levelno)s</code></td><td>数字形式的日志级别</td></tr><tr><td><code>%(levelname)s</code></td><td>文本形式的日志级别</td></tr><tr><td><code>%(pathname)s</code></td><td>调用日志输出函数的模块的完整路径名</td></tr><tr><td><code>%(filename)s</code></td><td>调用日志输出函数的模块的文件名</td></tr><tr><td><code>%(module)s</code></td><td>调用日志输出函数的模块名</td></tr><tr><td><code>%(funcName)s</code></td><td>调用日志输出函数的函数名</td></tr><tr><td><code>%(lineno)d</code></td><td>调用日志输出函数的语句所在的代码行</td></tr><tr><td><code>%(created)f</code></td><td>当前时间，用 UNIX 标准的表示时间的浮点数表示</td></tr><tr><td><code>%(relativeCreated)d</code></td><td>输出日志信息时的，自 Logger 创建以来的毫秒数</td></tr><tr><td><code>%(asctime)s</code></td><td>字符串形式的当前时间。默认格式是“2003-07-08 16:49:45,896”</td></tr><tr><td><code>%(thread)d</code></td><td>线程 ID</td></tr><tr><td><code>%(threadName)s</code></td><td>线程名</td></tr><tr><td><code>%(process)d</code></td><td>进程 ID</td></tr><tr><td><code>%(message)s</code></td><td>用户输出的消息</td></tr></tbody></table><h3 id="配置-logger-实例参数" tabindex="-1">配置 logger 实例参数 <a class="header-anchor" href="#配置-logger-实例参数" aria-label="Permalink to &quot;配置 logger 实例参数&quot;">​</a></h3><p><code>logging.getLogger()</code>实例化一个记录器对象</p><p>即使不实例化，也会默认创建<code>root logger</code>，缺省值读取<code>basicConfig()</code>的配置<br> 记录器对象可以设置：</p><ul><li><code>logger.setLevel(logging.ERROR)</code> 设置日志级别为 ERROR</li><li><code>logger.addHandler(handler_name)</code> 为 Logger 实例增加一个处理器</li><li><code>logger.removeHandler(handler_name)</code> 为 Logger 实例删除一个处理器</li></ul><p>创建和添加处理器 Handler</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging.getLogger()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用于写入日志文件的handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging.FileHandler(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 用于输出到控制台的handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging.StreamHandler()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># logger对象可以添加多个handler</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.addHandler(fh)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.addHandler(ch)</span></span></code></pre></div><p>处理器对象也可以设置：</p><ul><li><code>ch.setLevel(logging.WARN)</code> # 单对这个流设置日志级别</li><li><code>ch.setFormatter(formatter_name)</code> # 设置一个格式化器 formatter</li><li><code>ch.addFilter(filter_name)</code> # 增加一个过滤器，可以增加多个</li><li><code>ch.removeFilter(filter_name)</code> # 删除一个过滤器</li></ul><p>创建格式化器：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging.FileHandler(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formatter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logging.Formatter(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%(asctime)s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%(name)s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%(levelname)s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%(message)s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fh.setFormatter(formatter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">logger.addHandler(fh)</span></span></code></pre></div><h2 id="sqlite3-模块" tabindex="-1">sqlite3 模块 <a class="header-anchor" href="#sqlite3-模块" aria-label="Permalink to &quot;sqlite3 模块&quot;">​</a></h2><p>SQLite 是一种文件数据库，它的数据库就是一个文件。Python 内置了 SQLite3。它适合作为保存日志的数据库。谷歌浏览器的 cookie 也使用了它。</p><h3 id="基本用法示例" tabindex="-1">基本用法示例 <a class="header-anchor" href="#基本用法示例" aria-label="Permalink to &quot;基本用法示例&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sqlite3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建连接，如果文件不存在，会自动在当前目录创建:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sqlite3.connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;test.db&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建游标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cursor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conn.cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行SQL语句，创建user表:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cursor.execute(r</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;&quot;&quot;CREATE TABLE &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; (</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot; varchar(20)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    );&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqlite3.Cursor object at 0x10f8aa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">260&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 继续执行一条SQL语句，插入一条记录:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cursor.execute(r</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;&quot;&quot;INSERT INTO &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;.&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;(name) VALUES (&#39;Michael&#39;);&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sqlite3.Cursor object at 0x10f8aa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">260&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关闭游标</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cursor.close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 提交事务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conn.commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关闭连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">conn.close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="游标对象常用属性和方法" tabindex="-1">游标对象常用属性和方法 <a class="header-anchor" href="#游标对象常用属性和方法" aria-label="Permalink to &quot;游标对象常用属性和方法&quot;">​</a></h3><ul><li><code>cursor.execute()</code>执行 SQL 语句并返回<code>cursor</code>对象本身</li><li><code>cursor.rowcount</code>刚刚执行语句影响的行数</li><li><code>cursor.fetchone()</code>弹出刚刚执行查询语句的结果集的第一条，元组</li><li><code>cursor.fetchall()</code>刚刚执行查询语句的全部（剩余）结果集，列表嵌套元组</li></ul><p>直接遍历（for in）<code>cursor</code>对象本身也可以拿到（剩余）结果集</p><p>sqlite 方言和一般的 sql 略有区别，比如单引号和双引号的区别，没有实现 truncate 语句等。</p><p>基本的 sql 语句和更多的数据库连接模块的用法在之后章节有介绍。</p>`,38)]))}const E=i(l,[["render",e]]);export{o as __pageData,E as default};
