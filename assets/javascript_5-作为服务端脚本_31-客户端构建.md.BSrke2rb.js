import{_ as p,c as l,o as a,ag as i}from"./chunks/framework.BF6hFJP9.js";const b=JSON.parse('{"title":"客户端构建","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/5-作为服务端脚本/31-客户端构建.md","filePath":"javascript/5-作为服务端脚本/31-客户端构建.md","lastUpdated":1734619541000}'),t={name:"javascript/5-作为服务端脚本/31-客户端构建.md"};function o(s,e,r,n,c,u){return a(),l("div",null,e[0]||(e[0]=[i('<h1 id="客户端构建" tabindex="-1">客户端构建 <a class="header-anchor" href="#客户端构建" aria-label="Permalink to &quot;客户端构建&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">关于框架</p><p>本笔记只记录基础用法，详细的框架用法请左转其官方文档。</p></div><h2 id="web-apps" tabindex="-1">Web Apps <a class="header-anchor" href="#web-apps" aria-label="Permalink to &quot;Web Apps&quot;">​</a></h2><p>过去的三大框架</p><ul><li>Angular</li><li>Vue</li><li>React</li></ul><p>借助它们的工具链可以快速构建 Web Apps，以 vue 为例</p><p>vue.js 本身是客户端脚本，即可以在浏览器直接 script 标签引入。</p><p>其脚手架@vue/cli 提供的是开发服务器，可以将<strong>单文件组件</strong>(<code>.vue</code>以及<code>.jsx</code>或<code>.tsx</code>)编译后打包成引入 vue.js 的<strong>单页应用</strong>。</p><p>在以前，脚手架一般基于 webpack，而现在往往是 Vite 等。</p><p>框架和库的差别主要在于交出控制，vue.use 方法支持注入依赖，</p><p>可以注入官方提供的路由插件 vue-router，官方推荐的状态集中管理插件 vuex，和一些 vue3 的 ui 库：</p><ul><li><a href="https://www.naiveui.com/" target="_blank" rel="noreferrer">Naïve UI</a>（vue 作者推荐）</li><li><a href="https://element-plus.org/" target="_blank" rel="noreferrer">Element PLUS</a>（饿了么）</li></ul><h2 id="web-components" tabindex="-1">Web Components <a class="header-anchor" href="#web-components" aria-label="Permalink to &quot;Web Components&quot;">​</a></h2><p><code>.vue</code>后缀的单文件组件和 vue 框架强绑定了。而原生其实支持不和框架绑定的 Web Components。</p><p>Web Components 由三种技术组成</p><ul><li>Custom Elements 自定义标签</li><li>Shadow DOM 隔离样式和行为</li><li>templates and slots</li></ul><p>Web Components 的构建也有三大框架</p><ul><li>Solid</li><li>Svelte</li><li>Lit</li></ul><p>Svelte 不止能构建 Web Apps，也可以构建 Web Components，</p><p>后续 vue 单文件组件可能也能编译为 Web Components</p><h2 id="progressive-web-apps" tabindex="-1">Progressive Web Apps <a class="header-anchor" href="#progressive-web-apps" aria-label="Permalink to &quot;Progressive Web Apps&quot;">​</a></h2><p>PWA 是可以被浏览器安装到桌面的 Web Apps，权限比 Web Apps 来的更大</p><ul><li><p>手机应用配置(Web App Manifest) 可以通过 manifest.json 文件配置，使得可以直接添加到手机的桌面上。</p></li><li><p>离线加载与缓存(Service Worker &amp; Cache API) 可以通过 Service Worker + HTTPS + Cache Api + indexedDB 等一系列 Web 技术实现离线加载和缓存。</p></li><li><p>消息推动与通知(Push&amp;Notification) 实现实时的消息推送与通知</p></li><li><p>数据及时更新(Background Sync) 后台同步，数据及时更新</p></li></ul><h2 id="desktop-application" tabindex="-1">Desktop Application <a class="header-anchor" href="#desktop-application" aria-label="Permalink to &quot;Desktop Application&quot;">​</a></h2><p>框架主要有</p><ul><li>NW.js</li><li>Electron</li></ul><p>借助 nodejs，桌面应用也可以由 html css js 来构建。</p><p>优点：</p><ul><li>开发周期短</li><li>跨平台</li><li>学习成本低</li><li>维护成本低</li></ul><p>缺点：</p><ul><li>打包后体积大</li></ul><p>vscode、clash 等软件都是 Electron 构建的</p><p>NWjs 更适合游戏</p>',33)]))}const h=p(t,[["render",o]]);export{b as __pageData,h as default};
