import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.BF6hFJP9.js";const E=JSON.parse('{"title":"系统有关模块","description":"","frontmatter":{},"headers":[],"relativePath":"python/5-并发编程/26-系统有关模块.md","filePath":"python/5-并发编程/26-系统有关模块.md","lastUpdated":1734619541000}'),h={name:"python/5-并发编程/26-系统有关模块.md"};function p(l,s,k,e,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="系统有关模块" tabindex="-1">系统有关模块 <a class="header-anchor" href="#系统有关模块" aria-label="Permalink to &quot;系统有关模块&quot;">​</a></h1><h2 id="sys-模块" tabindex="-1">sys 模块 <a class="header-anchor" href="#sys-模块" aria-label="Permalink to &quot;sys 模块&quot;">​</a></h2><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/sys.html" target="_blank" rel="noreferrer"><code>sys</code></a>模块是与 python 解释器交互的一个接口</p></blockquote><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.argv  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 命令行参数List，第一个元素是程序本身路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.exit(n)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 退出程序，正常退出时exit(0),错误退出sys.exit(1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.version  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取Python解释程序的版本信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.path  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.platform  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回操作系统平台名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sys.setrecursionlimit(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">limit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python解释器堆栈的最大深度设置</span></span></code></pre></div><p>试图错误退出</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sys.exit(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SystemExit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div><h3 id="输出" tabindex="-1">输出 <a class="header-anchor" href="#输出" aria-label="Permalink to &quot;输出&quot;">​</a></h3><p><code>print(&#39;hello&#39;)</code>的本质是<code>sys.stdout.write(&#39;hello&#39;+&#39;\\n&#39;)</code><br><code>sys.stdout.flush()</code>将缓冲区的内容强制打印<br> 在控制台打印字符进度条使用<code>sys.stdout.flush()</code>会更加平滑<br> Windows 系统的回车符<code>&#39;\\r&#39;</code>可以重写本行的内容，完成进度条的效果。<br> 打印异常则是<code>sys.stderr</code></p><p>需要输出控制台颜色控制符，需要先使用<code>os.system(&quot;&quot;)</code></p><h2 id="os-模块" tabindex="-1">os 模块 <a class="header-anchor" href="#os-模块" aria-label="Permalink to &quot;os 模块&quot;">​</a></h2><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/os.html" target="_blank" rel="noreferrer"><code>os</code></a>模块是与操作系统交互的一个接口</p></blockquote><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.sep  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出操作系统特定的路径分隔符，win下为&quot;\\\\&quot;,Linux下为&quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.linesep  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出当前平台使用的行终止符，win下为&quot;\\r\\n&quot;,Linux下为&quot;\\n&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.pathsep  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出用于分割文件路径的字符串 win下为;,Linux下为:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.name  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出字符串指示当前使用平台。win-&gt;&#39;nt&#39;; Linux-&gt;&#39;posix&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.curdir  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回当前目录:&quot;.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.pardir  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取当前目录的父目录字符串名:&quot;..&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取环境变量</span></span></code></pre></div><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.getcwd()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取工作目录 即当前python脚本工作的目录路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.chdir(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dirname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 改版当前脚本工作目录 相当于cd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.makedirs(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dirname1/dirname2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可生成多层递归目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.removedirs(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;dirname1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.mkdir(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dirname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成单级目录；相当于shell中mkdir dirname</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.rmdir(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;dirname&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.listdir(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;dirname&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.remove()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除一个文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.rename(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;oldname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 重命名文件/目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.stat(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/filename&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取文件/目录信息</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_mode: inode 保护模式</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_ino: inode 节点号。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_dev: inode 驻留的设备。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_nlink: inode 的链接数。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_uid: 所有者的用户ID。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_gid: 所有者的组ID。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_size: 普通文件以字节为单位的大小；包含等待某些特殊文件的数据。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_atime: 上次访问的时间。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_mtime: 最后一次修改的时间。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    st_ctime: 由操作系统报告的&quot;ctime&quot;。在某些系统上（如Unix）是最新的元数据更改的时间，</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            在其它系统上（如Windows）是创建时间（详细信息参见平台的文档）。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.system(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bash command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行shell命令，直接显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.popen(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bash command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).read()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 运行shell命令，获取执行结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.getpid()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取当前进程PID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.getppid()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取父进程PID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.chdir(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dirname&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 改变当前脚本工作目录；相当于shell下cd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.abspath(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回path规范化的绝对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.split(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将path分割成目录和文件名二元组返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.dirname(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回path的目录。其实就是os.path.split(path)[0]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.basename(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回path最后的文件名。即os.path.split(path)[1]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.exists(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果path存在，返回True；如果path不存在，返回False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.isabs(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果path是绝对路径，返回True</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.isfile(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果path是一个存在的文件，返回True。否则返回False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.isdir(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果path是一个存在的目录，则返回True。否则返回False</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.join(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path1, path2, path3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.getatime(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回path所指向的文件或者目录的最后访问时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.getmtime(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回path所指向的文件或者目录的最后修改时间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.getsize(path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回path的大小 文件夹固定4096不准确</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">关于<code>__file__</code>的使用</p><p>不要直接使用<code>__file__</code>，因为它在 shell、IDLE、Pycharm 中的表示形式各不相同。</p><p>可以以<code>os.path.abspath(__file__)</code> / <code>pathlib.Path(__file__)</code>的方式来使用</p></div><p>很多时候，特别是 GUI 程序，<code>os.popen</code>函数不推荐使用，而推荐使用 subprocess 模块的<code>popen</code></p><h2 id="subprocess-模块" tabindex="-1">subprocess 模块 <a class="header-anchor" href="#subprocess-模块" aria-label="Permalink to &quot;subprocess 模块&quot;">​</a></h2><p>subprocess 模块是在 python2.4 版本中新增的，官方文档中描述为可以用来替换以下函数：</p><p><code>os.system</code>、<code>os.spawn</code>、<code>os.popen</code>、<code>popen2</code></p><table tabindex="0"><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>subprocess.run()</td><td>Python 3.5 中新增的函数。执行指定的命令，等待命令执行完成后返回一个包含执行结果的 CompletedProcess 类的实例。</td></tr><tr><td>subprocess.call()</td><td>执行指定的命令，返回命令执行状态，其功能类似于 os.system(cmd)。</td></tr><tr><td>subprocess.check_call()</td><td>Python 2.5 中新增的函数。 执行指定的命令，如果执行成功则返回状态码，否则抛出异常。其功能等价于 subprocess.run(..., check=True)。</td></tr><tr><td>subprocess.check_output()</td><td>Python 2.7 中新增的的函数。执行指定的命令，如果执行状态码为 0 则返回命令执行结果，否则抛出异常。</td></tr><tr><td>subprocess.getoutput(cmd)</td><td>接收字符串格式的命令，执行命令并返回执行结果，其功能类似于 os.popen(cmd).read()和 commands.getoutput(cmd)。</td></tr><tr><td>subprocess.getstatusoutput(cmd)</td><td>执行 cmd 命令，返回一个元组(命令执行状态, 命令执行结果输出)，其功能类似于 commands.getstatusoutput()。</td></tr></tbody></table><h3 id="模块方法说明" tabindex="-1">模块方法说明 <a class="header-anchor" href="#模块方法说明" aria-label="Permalink to &quot;模块方法说明&quot;">​</a></h3><ol><li>在 Python 3.5 之后的版本中，官方文档中提倡通过<code>subprocess.run()</code>函数替代其他函数来使用 subproccess 模块的功能；</li><li>在 Python 3.5 之前的版本中，我们可以通过<code>subprocess.call()</code>，<code>subprocess.getoutput()</code>等上面列出的其他函数来使用 subprocess 模块的功能；</li><li><code>subprocess.run()</code>、<code>subprocess.call()</code>、<code>subprocess.check_call()</code>和<code>subprocess.check_output()</code>都是通过对<code>subprocess.Popen</code>的封装来实现的高级函数，因此如果我们需要更复杂功能时，可以通过<code>subprocess.Popen</code>来完成。</li><li><code>subprocess.getoutput()</code>和<code>subprocess.getstatusoutput()</code>函数是来自 Python 2.x 的 commands 模块的两个遗留函数。它们隐式的调用系统 shell，并且不保证其他函数所具有的安全性和异常处理的一致性。另外，它们从 Python 3.3.4 开始才支持 Windows 平台。</li></ol><p>subprocess 模块目的是<strong>启动一个新的进程并与之通信</strong>，最常用是定义类<code>Popen</code>，<br> 使用<code>Popen</code>可以创建进程，并与进程进行复杂的交互。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subprocess</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subprocess.Popen(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stdout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subprocess.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PIPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">shell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p.stdout.read())</span></span></code></pre></div><h3 id="popen类参数说明" tabindex="-1"><code>Popen</code>类参数说明 <a class="header-anchor" href="#popen类参数说明" aria-label="Permalink to &quot;\`Popen\`类参数说明&quot;">​</a></h3><ul><li>args 要执行的 shell 命令，可以是字符串，也可以是命令各个参数组成的序列。</li><li>bufsize 指定缓存策略，0 不缓冲，1 行缓冲，大于 1 表示缓冲区大小，负数表示系统默认。</li><li>stdin, stdout, stderr 程序标准输入、输出、错误句柄。</li><li>preexec_fn 指定一个将在子进程运行之前被调用的可执行对象，只在 Unix 平台下有效。</li><li>close_fds 除了 0,1 和 2 之外的所有文件描述符 是否在子进程执行之前关闭。</li><li>shell 是否使用 shell 作为要执行的程序，True 时建议 args 参数是一个字符串</li><li>cwd 如果该参数值不是 None，则该函数将会在执行这个子进程之前改变当前工作目录。</li><li>env 用于指定子进程的环境变量，默认从父进程中继承。</li><li>universal_newlines 是否将 stdin，stdout 和 stderr 作为文本流打开</li><li>startupinfo 和 creationflags 这两个参数只在 Windows 下有效，它们将被传递给底层的 CreateProcess()函数，用于设置子进程的一些属性，如主窗口的外观，进程优先级等。</li></ul><p>使用 python 调用 cmd 中的 python 打印 helloworld：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">obj</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> subprocess.Popen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           stdin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">subprocess.PIPE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           stdout</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">subprocess.PIPE,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                           stderr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">subprocess.PIPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">out,err</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> obj.communicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;print(&quot;helloworld！&quot;) \\n&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helloworld！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="popen类方法说明" tabindex="-1"><code>Popen</code>类方法说明 <a class="header-anchor" href="#popen类方法说明" aria-label="Permalink to &quot;\`Popen\`类方法说明&quot;">​</a></h3><table tabindex="0"><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>Popen.poll()</td><td>用于检查子进程（命令）是否已经执行结束，没结束返回 None，结束后返回状态码。</td></tr><tr><td>Popen.wait(timeout=None)</td><td>等待子进程结束，并返回状态码；如果在 timeout 指定的秒数之后进程还没有结束，将会抛出一个 TimeoutExpired 异常。</td></tr><tr><td>Popen.communicate(input=None, timeout=None)</td><td>该方法可用来与进程进行交互，比如发送数据到 stdin，从 stdout 和 stderr 读取数据，直到到达文件末尾。</td></tr><tr><td>Popen.send_signal(signal)</td><td>发送指定的信号给这个子进程。</td></tr><tr><td>Popen.terminate()</td><td>停止该子进程。</td></tr><tr><td>Popen.kill()</td><td>杀死该子进程。</td></tr></tbody></table><p>其实例化对象可以用<code>.wait()</code>方法来等返回结果，否则不会阻塞。</p><p>设定一小时后关机</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subprocess.Popen(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shutdown -s -t 3600&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">shell</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.wait()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 阻塞进程等待shell命令执行完毕</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">子进程：【拒绝访问。(5)】的推荐解决办法</p><p>运行 gpedit.msc：计算机配置—–&gt;windows 设置—–&gt;安全设置—–&gt;本地策略—–&gt;安全选项—–&gt;用户帐户控制：用于内置管理员帐户的管理员批准模式—–&gt;禁用</p></div><div class="warning custom-block"><p class="custom-block-title">家庭版：【找不到 gpedit.msc】的推荐解决办法</p><p>使用 DISM 命令：部署映像服务和管理工具，win10 家庭版批处理如下：</p></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> off</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pushd </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%~dp0&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">indows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ervicing</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ackages</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">icrosoft-Windows-GroupPolicy-ClientExtensions-Package~3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.mum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">List.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> C:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\W</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">indows</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ervicing</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ackages</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">icrosoft-Windows-GroupPolicy-ClientTools-Package~3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.mum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">List.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /f %%i in (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;findstr /i . List.txt 2^&gt;nul&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dism /online /norestart /add-package:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C:\\Windows\\servicing\\Packages\\%%i&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">账户获取管理员权限</p><p>家庭版等 Administrator 账户是默认隐藏和关闭的，<br> 不要使用命令<code>net user administrator /active:yes</code>去开启<br> 应该运行 netplwiz 去修改组（重启）</p></div><h2 id="pathlib-模块" tabindex="-1">pathlib 模块 <a class="header-anchor" href="#pathlib-模块" aria-label="Permalink to &quot;pathlib 模块&quot;">​</a></h2><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/pathlib.html#module-pathlib" target="_blank" rel="noreferrer"><code>pathlib</code></a> --- 面向对象的文件系统路径 其类似于 join</p></blockquote><p>对象之间可以使用斜杠 <code>/</code> 操作符创建子路径</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib.PurePosixPath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/etc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;httpd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib.PurePosixPath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;httpd.conf&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># PurePosixPath(&#39;/etc/httpd/conf/httpd.conf&#39;)</span></span></code></pre></div><p>对象.parts 属性可以访问路径的多个组件</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib.PureWindowsPath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c:/Program Files/PSF&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p.parts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># (&#39;c:\\\\&#39;, &#39;Program Files&#39;, &#39;PSF&#39;)</span></span></code></pre></div><h3 id="纯路径" tabindex="-1">纯路径 <a class="header-anchor" href="#纯路径" aria-label="Permalink to &quot;纯路径&quot;">​</a></h3><p>不实际访问文件系统的路径处理操作</p><ul><li>pathlib.PurePath(*)</li><li>pathlib.PurePosixPath(*)</li><li>pathlib.PureWindowsPath(*)</li></ul><p>同风格可以比较可以排序</p><p>对象可以被 os 模块中的方法所接受（ <a href="https://docs.python.org/zh-cn/3/library/os.html#os.PathLike" target="_blank" rel="noreferrer"><code>os.PathLike</code></a> 接口实现）</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib.PurePath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/etc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.fspath(p)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &#39;/etc&#39;</span></span></code></pre></div><p>不同风格的对象的<code>__str__</code>的斜杠风格不同</p><h3 id="具体路径" tabindex="-1">具体路径 <a class="header-anchor" href="#具体路径" aria-label="Permalink to &quot;具体路径&quot;">​</a></h3><p>是纯路径的子类。除了后者提供的操作之外，它们还提供了对路径对象进行系统调用的方法。</p><ul><li>pathlib.Path(*)</li><li>pathlib.PosixPath(*)</li><li>pathlib.WindowsPath(*)</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pathlib.Path(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__file__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).parent  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当前脚本目录路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pathlib.Path.cwd()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当前工作目录路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pathlib.Path.resolve(PathLike)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绝对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pathlib.Path.stat(PathLike)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取文件/目录信息</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">脚本所在目录问题</p><p>如果 py 文件使用右键<em>打开方式</em>选择解释器运行会导致 cwd 定位到 C:\\Windows\\System32<br> 应该在 cmd 中使用命令或者选定为默认打开方式双击</p></div><h3 id="与-os-模块映射" tabindex="-1">与 OS 模块映射 <a class="header-anchor" href="#与-os-模块映射" aria-label="Permalink to &quot;与 OS 模块映射&quot;">​</a></h3><p><a href="https://docs.python.org/zh-cn/3/library/pathlib.html#correspondence-to-tools-in-the-os-module" target="_blank" rel="noreferrer">os 模块方法与 pathlib.path 方法的映射</a></p><p>常用的：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##文件名简易合法化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">file_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;文_件/名.csv&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.isalnum())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##文件是否已经存在</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).joinpath(file_name).is_file():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##使用os 安全创建目录应当用try而不是if 错误范例：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.exists(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./opt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    os.makedirs(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./opt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##使用Path.mkdir安全创建目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./opt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).mkdir(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exist_ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##获取当前所在目录绝对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib.Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).resolve()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Path对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib.Path.cwd()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Path对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.getcwd()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(root_s)</span></span></code></pre></div><p><code>&quot;__file__&quot;</code>和<code>__file__</code>是当前文件的意思，</p><p><code>Path(&quot;__file__&quot;).parent</code>不一定等于<code>Path.cwd()</code>,这与启动的方式有关，</p><p>在 import 的时候两者会有差异 前者是入口文件的<code>__file__</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##获取所在目录里的子文件名（非目录）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.isdir(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), os.listdir(root_s)))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ls)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [p.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root.iterdir() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p.is_dir()]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ls)</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">##所在目录的所有psd和sai2工程子文件名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(re.findall(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(^.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">sai2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">(^.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\.</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">psd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name)), ls))</span></span></code></pre></div>`,67)]))}const g=i(h,[["render",p]]);export{E as __pageData,g as default};
